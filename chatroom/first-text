//循环队列 约定头指针指向队头尾指针指向队尾的下一元素
typedef struct
{
    int data[MAXSIZE];
    int front;
    int rear;
}SqQueue;

//循环队列初始化
int InitQueue（SqQueue *Q）
{
    Q->front = 0;
    Q->rear = 0;
    return TRUE;
}
//循环队列的入队
int InQueue(SqQueue *Q,int x)
{
    //首先查看是否队已将满了
    if((Q->rear+1))%MAXSIZE == Q->front)
    {
        return FALSE;
    }
    Q->data[Q->rear]=x;
    Q->rear = (Q->rear+1)%MAXSIZE;
    return TRUE;
}

//出队
int DeleQueue(Squeue *Q, int *x)
{
    if(Q->front == Q->rear)
    {
        return FALSE;
    }
    *x = Q->data[Q->front];
    Q->front = (Q->front+1)%MAXSIZE;
    return TRUE;
}


//----------------------------------------
//链式队列
typedef struct QNode
{
    int data;
    struct QNode *next;
}QNode;

typedef struct
{
    QNode *front;
    QNode *rear;
}LinkQueue;

int InitQueue(LinkQueue *Q)
{
    Q->front = (QNode*)malloc(sizeof(QNode));
    if(Q->front !=NULL)
    {
        Q->rear = Q->front;
        Q->front->next = NULL;
        return TRUE;
    }
    else
        return FALSE;
}

//入队
int InQueue(QNode *Q, int x)
{
    QNode *s = (QNode*)malloc(sizeof(QNode));
    if(s!=NULL)
    {
        s->data = x;
        s->next = NULL;//因为在链表尾部
        Q->rear->next = s;
        Q->rear = s;
        return TRUE;
    }
    else
        return FALSE;
}

//出队
//链表不存在满了但存在为空
int DeleQueue(QNode *Q, int *x)
{
    QNode *p;
    if(Q->front == Q->rear)
        return FALSE;
    p=Q->front->next;
    Q->front->next = p->next;
    if(Q->rear == p)
    Q->rear=Q->front;
    *x = p->data;
    free(p);
    return TRUE;

}